name: Continuous Delivery

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  TELEGRAM_API_DEV_ID: ${{ secrets.TELEGRAM_API_DEV_ID }}
  TELEGRAM_API_DEV_HASH: ${{ secrets.TELEGRAM_API_DEV_HASH }}
  TELEGRAM_CLIENT_SESSION: ${{ secrets.TELEGRAM_CLIENT_SESSION }}
  TELEGRAM_TEST_DC_IP: ${{ secrets.TELEGRAM_TEST_DC_IP }}
  TELEGRAM_TEST_DC_NUMBER: ${{ secrets.TELEGRAM_TEST_DC_NUMBER }}
  TELEGRAM_API_TOKEN: ${{ secrets.TELEGRAM_API_TOKEN }}
  QUOTE_API_TOKEN: ${{ secrets.QUOTE_API_TOKEN }}
  QUOTE_API_URL: ${{ secrets.QUOTE_API_URL }}
  LORREM_API_URL: ${{ secrets.LORREM_API_URL }}
  LORREM_API_TOKEN: ${{ secrets.LORREM_API_TOKEN }}
  CHAT_IDS: ${{ secrets.CHAT_IDS }}
  USER_IDS: ${{ secrets.USER_IDS }}
  MODE: ${{ secrets.MODE }}

jobs:
  build:
    name: "Install and cache requirements"
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install && poetry build
  unit-test:
    name: "Run unit tests with coverage"
    needs:
      - build
    runs-on: ubuntu-latest
    environment: Continuous Delivery
    env:
      JANISBOT_CONFIG: ${{ github.workspace }}/conf/default.conf
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run coverage run
      - run: poetry run coverage report
  static-analysis:
    name: "Static analysis with ruff"
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run ruff check .
  security-analysis:
    name: "Security analysis with bandit"
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run bandit -c pyproject.toml -r .
  formatting:
    name: "Check formatting with black"
    needs:
      - build
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - run: pipx install poetry==1.4.0
      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'poetry'
      - run: poetry install
      - run: poetry run black --check .
  end-to-end:
    name: "End to end tests"
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    needs:
      - build
      - unit-test
      - static-analysis
      - security-analysis
      - formatting
    runs-on: ubuntu-latest
    environment: Continuous Delivery
    steps:
    - uses: actions/checkout@v3
    - run: pipx install poetry==1.4.0
    - uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        cache: 'poetry'
    - run: poetry install
    - run: poetry run pytest tests/e2e/
  publish:
    name: "Publish to registry"
    if: github.ref == 'refs/heads/master' && github.event_name != 'pull_request'
    needs:
    - end-to-end
    runs-on: ubuntu-latest
    environment: Continuous Delivery
    steps:
    - uses: actions/checkout@v3
    - name: Publish to Registry
      uses: HurricanKai/Publish-Docker-Github-Action@1.12.1
      with:
        name: ${{ secrets.DOCKER_REGISTRY }}/janisbot4
        registry: ${{ secrets.DOCKER_REGISTRY }}
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        cache: true
